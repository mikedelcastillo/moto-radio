import * as CONSTS from "../src/constants"
import fs from "fs"

const OUT_PATH = "../arduino/lib/constants.h"

const lines = [
  `/* THIS FILE WAS AUTOGENERATED ON ${(new Date()).toISOString()} */`,
  "", "// If you wish to make changes, edit /server/src/constants.ts",
  "// then run \"yarn sync-constants\" to update this file.",
  "",
  "#ifndef MR_CONSTS",
  "#define MR_CONSTS",
]

const run = async () => {
  const defineValues: Array<[string, string]> = [
    ["SERIAL_BAUDRATE", CONSTS.SERIAL_BAUDRATE.toString()],
    ["MAX_INT_RADIO_VALUE", CONSTS.MAX_INT_RADIO_VALUE.toString()],
    ["MAX_CONTROLLERS", CONSTS.MAX_CONTROLLERS.toString()],
    ["MAX_RADIO_ADDRESSES", CONSTS.MAX_RADIO_ADDRESSES.toString()],
    ["RADIO_MESSAGE_BUFFER_LENGTH", CONSTS.RADIO_MESSAGE_BUFFER_LENGTH.toString()],
  ]

  for (const key in CONSTS.BYTES) {
    defineValues.push([`${key}_BYTE`, CONSTS.BYTES[key as CONSTS.ByteKeys].charCodeAt(0).toString()])
  }

  // #define values
  lines.push("")
  for (const [varName, value] of defineValues) {
    lines.push(`#define ${varName} ${value}`)
  }

  // Int parser
  lines.push("")
  lines.push(...[
    "int parseIntFromChar(uint8_t value){",
    `  if(value < ${CONSTS.INT_START_BYTE}) { return 0; }`,
    `  if(value > ${CONSTS.INT_START_BYTE + CONSTS.MAX_INT_RADIO_VALUE}) { return ${CONSTS.MAX_INT_RADIO_VALUE}; }`,
    `  return value - ${CONSTS.INT_START_BYTE};`,
    "}",
  ])

  // Float parser
  lines.push("")
  lines.push(...[
    "float parseFloatFromChar(uint8_t value){",
    `  return ((float) parseIntFromChar(value)) / ((float) ${CONSTS.MAX_INT_RADIO_VALUE});`,
    "}",
  ])

  // Int to float
  lines.push("")
  lines.push(...[
    "float intToFloat(uint8_t value){",
    `  return ((float) value) / ((float) ${CONSTS.MAX_INT_RADIO_VALUE});`,
    "}",
  ])

  // Controller input struct
  lines.push("")
  lines.push(...[
    `typedef struct {`,
    ...CONSTS.RADIO_MESSAGE_BUFFER.map(([type, len]) => `  ${len === 1 ? "uint8_t" : "int8_t"} ${type};`),
    `} ControllerInput;`,
  ])

  // Controller struct reset
  lines.push("")
  lines.push(...[
    `void resetControllerInput(ControllerInput *cinput){`,
    ...CONSTS.RADIO_MESSAGE_BUFFER.map(([type]) =>
      `  cinput->${type} = 0;`),
    `}`,
  ])

  // Radio addresses
  lines.push("")
  lines.push(`uint8_t RADIO_ADDRESSES[][${CONSTS.RADIO_ADDRESSES.length}] = {\n${CONSTS.RADIO_ADDRESSES.map(word => "  " + JSON.stringify(word)).join(",\n")},\n};`)

  lines.push("", "#endif")

  const output = lines.join("\n")
  await fs.promises.writeFile(OUT_PATH, output)

}

run()