/* THIS FILE WAS AUTOGENERATED ON 2023-07-16T10:01:26.066Z */

// If you wish to make changes, edit /server/src/constants.ts
// then run "yarn sync-constants" to update this file.

#define SERIAL_BAUDRATE 115200
#define INT_MAX_VALUE 255
#define MAX_CONTROLLERS 4
#define MAX_RADIO_ADDRESSES 13
#define CONTROLLER_INPUT_BYTE 105
#define BUTTON_A_BYTE 0
#define BUTTON_B_BYTE 1
#define BUTTON_X_BYTE 2
#define BUTTON_Y_BYTE 3
#define BUTTON_START_BYTE 4
#define BUTTON_SELECT_BYTE 5
#define AXIS_LT_BYTE 6
#define AXIS_RT_BYTE 7
#define BUTTON_LB_BYTE 8
#define BUTTON_RB_BYTE 9
#define BUTTON_DU_BYTE 10
#define BUTTON_DD_BYTE 11
#define BUTTON_DL_BYTE 12
#define BUTTON_DR_BYTE 13
#define BUTTON_LS_BYTE 14
#define BUTTON_RS_BYTE 15
#define AXIS_LXL_BYTE 16
#define AXIS_LXR_BYTE 17
#define AXIS_LYU_BYTE 18
#define AXIS_LYD_BYTE 19
#define AXIS_RXL_BYTE 20
#define AXIS_RXR_BYTE 21
#define AXIS_RYU_BYTE 22
#define AXIS_RYD_BYTE 23
#define BUTTON_CENTER_BYTE 24
#define IGNORE_BYTE 25

int parseIntFromChar(uint8_t value){
  if(value < 0) { return 0; }
  if(value > 255) { return 255; }
  return value - 0;
}

float parseFloatFromChar(uint8_t value){
  return ((float) parseIntFromChar(value)) / ((float) 255);
}

float intToFloat(uint8_t value){
  return ((float) value) / ((float) 255);
}

enum ControllerInputType {
  CI_BUTTON_A,
  CI_BUTTON_B,
  CI_BUTTON_X,
  CI_BUTTON_Y,
  CI_BUTTON_START,
  CI_BUTTON_SELECT,
  CI_AXIS_LT,
  CI_AXIS_RT,
  CI_BUTTON_LB,
  CI_BUTTON_RB,
  CI_BUTTON_DU,
  CI_BUTTON_DD,
  CI_BUTTON_DL,
  CI_BUTTON_DR,
  CI_BUTTON_LS,
  CI_BUTTON_RS,
  CI_AXIS_LXL,
  CI_AXIS_LXR,
  CI_AXIS_LYU,
  CI_AXIS_LYD,
  CI_AXIS_RXL,
  CI_AXIS_RXR,
  CI_AXIS_RYU,
  CI_AXIS_RYD,
  CI_BUTTON_CENTER,
  CI_IGNORE,
};

ControllerInputType getControllerInputType(uint8_t value){
  if(value == 0) { return CI_BUTTON_A; }
  if(value == 1) { return CI_BUTTON_B; }
  if(value == 2) { return CI_BUTTON_X; }
  if(value == 3) { return CI_BUTTON_Y; }
  if(value == 4) { return CI_BUTTON_START; }
  if(value == 5) { return CI_BUTTON_SELECT; }
  if(value == 6) { return CI_AXIS_LT; }
  if(value == 7) { return CI_AXIS_RT; }
  if(value == 8) { return CI_BUTTON_LB; }
  if(value == 9) { return CI_BUTTON_RB; }
  if(value == 10) { return CI_BUTTON_DU; }
  if(value == 11) { return CI_BUTTON_DD; }
  if(value == 12) { return CI_BUTTON_DL; }
  if(value == 13) { return CI_BUTTON_DR; }
  if(value == 14) { return CI_BUTTON_LS; }
  if(value == 15) { return CI_BUTTON_RS; }
  if(value == 16) { return CI_AXIS_LXL; }
  if(value == 17) { return CI_AXIS_LXR; }
  if(value == 18) { return CI_AXIS_LYU; }
  if(value == 19) { return CI_AXIS_LYD; }
  if(value == 20) { return CI_AXIS_RXL; }
  if(value == 21) { return CI_AXIS_RXR; }
  if(value == 22) { return CI_AXIS_RYU; }
  if(value == 23) { return CI_AXIS_RYD; }
  if(value == 24) { return CI_BUTTON_CENTER; }
  if(value == 25) { return CI_IGNORE; }
}

typedef struct {
  uint8_t BUTTON_A;
  uint8_t BUTTON_B;
  uint8_t BUTTON_X;
  uint8_t BUTTON_Y;
  uint8_t BUTTON_START;
  uint8_t BUTTON_SELECT;
  uint8_t AXIS_LT;
  uint8_t AXIS_RT;
  uint8_t BUTTON_LB;
  uint8_t BUTTON_RB;
  uint8_t BUTTON_DU;
  uint8_t BUTTON_DD;
  uint8_t BUTTON_DL;
  uint8_t BUTTON_DR;
  uint8_t BUTTON_LS;
  uint8_t BUTTON_RS;
  uint8_t AXIS_LXL;
  uint8_t AXIS_LXR;
  uint8_t AXIS_LYU;
  uint8_t AXIS_LYD;
  uint8_t AXIS_RXL;
  uint8_t AXIS_RXR;
  uint8_t AXIS_RYU;
  uint8_t AXIS_RYD;
  uint8_t BUTTON_CENTER;
  uint8_t IGNORE;
} ControllerInput;

void resetControllerInput(ControllerInput *cinput){
  cinput->BUTTON_A = 0;
  cinput->BUTTON_B = 0;
  cinput->BUTTON_X = 0;
  cinput->BUTTON_Y = 0;
  cinput->BUTTON_START = 0;
  cinput->BUTTON_SELECT = 0;
  cinput->AXIS_LT = 0;
  cinput->AXIS_RT = 0;
  cinput->BUTTON_LB = 0;
  cinput->BUTTON_RB = 0;
  cinput->BUTTON_DU = 0;
  cinput->BUTTON_DD = 0;
  cinput->BUTTON_DL = 0;
  cinput->BUTTON_DR = 0;
  cinput->BUTTON_LS = 0;
  cinput->BUTTON_RS = 0;
  cinput->AXIS_LXL = 0;
  cinput->AXIS_LXR = 0;
  cinput->AXIS_LYU = 0;
  cinput->AXIS_LYD = 0;
  cinput->AXIS_RXL = 0;
  cinput->AXIS_RXR = 0;
  cinput->AXIS_RYU = 0;
  cinput->AXIS_RYD = 0;
  cinput->BUTTON_CENTER = 0;
  cinput->IGNORE = 0;
}

void setControllerInputValue(ControllerInput *cinput, uint8_t input, uint8_t value){
  uint8_t intValue = parseIntFromChar(value);
  if(input == 0) { cinput->BUTTON_A = intValue; }
  if(input == 1) { cinput->BUTTON_B = intValue; }
  if(input == 2) { cinput->BUTTON_X = intValue; }
  if(input == 3) { cinput->BUTTON_Y = intValue; }
  if(input == 4) { cinput->BUTTON_START = intValue; }
  if(input == 5) { cinput->BUTTON_SELECT = intValue; }
  if(input == 6) { cinput->AXIS_LT = intValue; }
  if(input == 7) { cinput->AXIS_RT = intValue; }
  if(input == 8) { cinput->BUTTON_LB = intValue; }
  if(input == 9) { cinput->BUTTON_RB = intValue; }
  if(input == 10) { cinput->BUTTON_DU = intValue; }
  if(input == 11) { cinput->BUTTON_DD = intValue; }
  if(input == 12) { cinput->BUTTON_DL = intValue; }
  if(input == 13) { cinput->BUTTON_DR = intValue; }
  if(input == 14) { cinput->BUTTON_LS = intValue; }
  if(input == 15) { cinput->BUTTON_RS = intValue; }
  if(input == 16) { cinput->AXIS_LXL = intValue; }
  if(input == 17) { cinput->AXIS_LXR = intValue; }
  if(input == 18) { cinput->AXIS_LYU = intValue; }
  if(input == 19) { cinput->AXIS_LYD = intValue; }
  if(input == 20) { cinput->AXIS_RXL = intValue; }
  if(input == 21) { cinput->AXIS_RXR = intValue; }
  if(input == 22) { cinput->AXIS_RYU = intValue; }
  if(input == 23) { cinput->AXIS_RYD = intValue; }
  if(input == 24) { cinput->BUTTON_CENTER = intValue; }
  if(input == 25) { cinput->IGNORE = intValue; }
}

uint8_t RADIO_ADDRESSES[][13] = {
  "twig",
  "soy",
  "boni",
  "branch",
  "pizza",
  "drafj",
  "draft",
  "blu",
  "percy",
  "pasta",
  "rust",
  "jinx",
  "bambi",
};