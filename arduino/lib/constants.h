/* THIS FILE WAS AUTOGENERATED ON 2023-07-18T01:05:05.099Z */

// If you wish to make changes, edit /server/src/constants.ts
// then run "yarn sync-constants" to update this file.

#define SERIAL_BAUDRATE 115200
#define MAX_INT_RADIO_VALUE 255
#define MAX_CONTROLLERS 4
#define MAX_RADIO_ADDRESSES 13
#define CONTROLLER_INPUT_BYTE 105
#define CONTROLLER_CLEAR_BYTE 99
#define BUTTON_A_BYTE 0
#define BUTTON_B_BYTE 1
#define BUTTON_X_BYTE 2
#define BUTTON_Y_BYTE 3
#define BUTTON_START_BYTE 4
#define BUTTON_SELECT_BYTE 5
#define AXIS_LT_BYTE 6
#define AXIS_RT_BYTE 7
#define BUTTON_LB_BYTE 8
#define BUTTON_RB_BYTE 9
#define BUTTON_DU_BYTE 10
#define BUTTON_DD_BYTE 11
#define BUTTON_DL_BYTE 12
#define BUTTON_DR_BYTE 13
#define BUTTON_LS_BYTE 14
#define BUTTON_RS_BYTE 15
#define AXIS_LSX_BYTE 16
#define AXIS_LSY_BYTE 17
#define AXIS_RSX_BYTE 18
#define AXIS_RSY_BYTE 19
#define BUTTON_CENTER_BYTE 20
#define IGNORE_BYTE 21

int parseIntFromChar(uint8_t value){
  if(value < 0) { return 0; }
  if(value > 255) { return 255; }
  return value - 0;
}

float parseFloatFromChar(uint8_t value){
  return ((float) parseIntFromChar(value)) / ((float) 255);
}

float intToFloat(uint8_t value){
  return ((float) value) / ((float) 255);
}

enum ControllerInputType {
  CI_BUTTON_A,
  CI_BUTTON_B,
  CI_BUTTON_X,
  CI_BUTTON_Y,
  CI_BUTTON_START,
  CI_BUTTON_SELECT,
  CI_AXIS_LT,
  CI_AXIS_RT,
  CI_BUTTON_LB,
  CI_BUTTON_RB,
  CI_BUTTON_DU,
  CI_BUTTON_DD,
  CI_BUTTON_DL,
  CI_BUTTON_DR,
  CI_BUTTON_LS,
  CI_BUTTON_RS,
  CI_AXIS_LSX,
  CI_AXIS_LSY,
  CI_AXIS_RSX,
  CI_AXIS_RSY,
  CI_BUTTON_CENTER,
  CI_IGNORE,
};

ControllerInputType getControllerInputType(uint8_t value){
  if(value == 0) { return CI_BUTTON_A; }
  if(value == 1) { return CI_BUTTON_B; }
  if(value == 2) { return CI_BUTTON_X; }
  if(value == 3) { return CI_BUTTON_Y; }
  if(value == 4) { return CI_BUTTON_START; }
  if(value == 5) { return CI_BUTTON_SELECT; }
  if(value == 6) { return CI_AXIS_LT; }
  if(value == 7) { return CI_AXIS_RT; }
  if(value == 8) { return CI_BUTTON_LB; }
  if(value == 9) { return CI_BUTTON_RB; }
  if(value == 10) { return CI_BUTTON_DU; }
  if(value == 11) { return CI_BUTTON_DD; }
  if(value == 12) { return CI_BUTTON_DL; }
  if(value == 13) { return CI_BUTTON_DR; }
  if(value == 14) { return CI_BUTTON_LS; }
  if(value == 15) { return CI_BUTTON_RS; }
  if(value == 16) { return CI_AXIS_LSX; }
  if(value == 17) { return CI_AXIS_LSY; }
  if(value == 18) { return CI_AXIS_RSX; }
  if(value == 19) { return CI_AXIS_RSY; }
  if(value == 20) { return CI_BUTTON_CENTER; }
  if(value == 21) { return CI_IGNORE; }
}

typedef struct {
  uint8_t pos = 0;
  uint8_t neg = 0;
} ControllerValue;

typedef struct {
  ControllerValue BUTTON_A;
  ControllerValue BUTTON_B;
  ControllerValue BUTTON_X;
  ControllerValue BUTTON_Y;
  ControllerValue BUTTON_START;
  ControllerValue BUTTON_SELECT;
  ControllerValue AXIS_LT;
  ControllerValue AXIS_RT;
  ControllerValue BUTTON_LB;
  ControllerValue BUTTON_RB;
  ControllerValue BUTTON_DU;
  ControllerValue BUTTON_DD;
  ControllerValue BUTTON_DL;
  ControllerValue BUTTON_DR;
  ControllerValue BUTTON_LS;
  ControllerValue BUTTON_RS;
  ControllerValue AXIS_LSX;
  ControllerValue AXIS_LSY;
  ControllerValue AXIS_RSX;
  ControllerValue AXIS_RSY;
  ControllerValue BUTTON_CENTER;
  ControllerValue IGNORE;
} ControllerInput;

void resetControllerInput(ControllerInput *cinput){
  ControllerValue BUTTON_A_VAL;
  cinput->BUTTON_A = BUTTON_A_VAL;
  ControllerValue BUTTON_B_VAL;
  cinput->BUTTON_B = BUTTON_B_VAL;
  ControllerValue BUTTON_X_VAL;
  cinput->BUTTON_X = BUTTON_X_VAL;
  ControllerValue BUTTON_Y_VAL;
  cinput->BUTTON_Y = BUTTON_Y_VAL;
  ControllerValue BUTTON_START_VAL;
  cinput->BUTTON_START = BUTTON_START_VAL;
  ControllerValue BUTTON_SELECT_VAL;
  cinput->BUTTON_SELECT = BUTTON_SELECT_VAL;
  ControllerValue AXIS_LT_VAL;
  cinput->AXIS_LT = AXIS_LT_VAL;
  ControllerValue AXIS_RT_VAL;
  cinput->AXIS_RT = AXIS_RT_VAL;
  ControllerValue BUTTON_LB_VAL;
  cinput->BUTTON_LB = BUTTON_LB_VAL;
  ControllerValue BUTTON_RB_VAL;
  cinput->BUTTON_RB = BUTTON_RB_VAL;
  ControllerValue BUTTON_DU_VAL;
  cinput->BUTTON_DU = BUTTON_DU_VAL;
  ControllerValue BUTTON_DD_VAL;
  cinput->BUTTON_DD = BUTTON_DD_VAL;
  ControllerValue BUTTON_DL_VAL;
  cinput->BUTTON_DL = BUTTON_DL_VAL;
  ControllerValue BUTTON_DR_VAL;
  cinput->BUTTON_DR = BUTTON_DR_VAL;
  ControllerValue BUTTON_LS_VAL;
  cinput->BUTTON_LS = BUTTON_LS_VAL;
  ControllerValue BUTTON_RS_VAL;
  cinput->BUTTON_RS = BUTTON_RS_VAL;
  ControllerValue AXIS_LSX_VAL;
  cinput->AXIS_LSX = AXIS_LSX_VAL;
  ControllerValue AXIS_LSY_VAL;
  cinput->AXIS_LSY = AXIS_LSY_VAL;
  ControllerValue AXIS_RSX_VAL;
  cinput->AXIS_RSX = AXIS_RSX_VAL;
  ControllerValue AXIS_RSY_VAL;
  cinput->AXIS_RSY = AXIS_RSY_VAL;
  ControllerValue BUTTON_CENTER_VAL;
  cinput->BUTTON_CENTER = BUTTON_CENTER_VAL;
  ControllerValue IGNORE_VAL;
  cinput->IGNORE = IGNORE_VAL;
}

void setControllerInputValue(ControllerInput *cinput, uint8_t input, ControllerValue value){
  if(input == 0) { cinput->BUTTON_A = value; }
  if(input == 1) { cinput->BUTTON_B = value; }
  if(input == 2) { cinput->BUTTON_X = value; }
  if(input == 3) { cinput->BUTTON_Y = value; }
  if(input == 4) { cinput->BUTTON_START = value; }
  if(input == 5) { cinput->BUTTON_SELECT = value; }
  if(input == 6) { cinput->AXIS_LT = value; }
  if(input == 7) { cinput->AXIS_RT = value; }
  if(input == 8) { cinput->BUTTON_LB = value; }
  if(input == 9) { cinput->BUTTON_RB = value; }
  if(input == 10) { cinput->BUTTON_DU = value; }
  if(input == 11) { cinput->BUTTON_DD = value; }
  if(input == 12) { cinput->BUTTON_DL = value; }
  if(input == 13) { cinput->BUTTON_DR = value; }
  if(input == 14) { cinput->BUTTON_LS = value; }
  if(input == 15) { cinput->BUTTON_RS = value; }
  if(input == 16) { cinput->AXIS_LSX = value; }
  if(input == 17) { cinput->AXIS_LSY = value; }
  if(input == 18) { cinput->AXIS_RSX = value; }
  if(input == 19) { cinput->AXIS_RSY = value; }
  if(input == 20) { cinput->BUTTON_CENTER = value; }
  if(input == 21) { cinput->IGNORE = value; }
}

uint8_t RADIO_ADDRESSES[][13] = {
  "twig",
  "soy",
  "boni",
  "branch",
  "pizza",
  "drafj",
  "draft",
  "blu",
  "percy",
  "pasta",
  "rust",
  "jinx",
  "bambi",
};